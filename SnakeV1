
# created with curses

import curses
from random import randint

# Initial setup
curses.initscr()
win = curses.newwin(20, 60, 0, 0)  # Set window size
win.keypad(1)
curses.noecho()
curses.curs_set(0)
win.border(0)
win.nodelay(1)

snake = [(4, 10), (4, 9), (4, 8)]  # Initial snake coordinates
food = (10, 20)  # Initial food coordinates

win.addch(food[0], food[1], '#')  # Prints the food

# Game logic
score = 0

key = curses.KEY_RIGHT  # Initial direction of movement

while True:
    win.addstr(0, 2, 'Score: ' + str(score) + ' ')  # Printing Score
    win.timeout(150 - (len(snake)) // 5 + len(snake) // 10 % 120)  # Increases the speed of Snake as its length increases

    prev_key = key
    event = win.getch()
    key = key if event == -1 else event

    if snake[0] == food:  # When snake eats the food
        score += 1
        food = ()
        while food == ():
            food = (randint(1, 18), randint(1, 58))  # Calculating next food's coordinates
            if food in snake:
                food = ()
        win.addch(food[0], food[1], '#')
    else:
        last = snake.pop()  # [1] If it does not eat food, length decreases
        win.addch(last[0], last[1], ' ')

    win.addch(snake[0][0], snake[0][1], '*')

    # If snake hits the boundaries
    if snake[0][0] == 0 or snake[0][0] == 19 or snake[0][1] == 0 or snake[0][1] == 59:
        break

    # If snake runs over itself
    if snake[0] in snake[1:]:
        break

    # Controls the direction of snake
    if key == curses.KEY_DOWN and prev_key != curses.KEY_UP:
        snake.insert(0, (snake[0][0] + 1, snake[0][1]))
    elif key == curses.KEY_UP and prev_key != curses.KEY_DOWN:
        snake.insert(0, (snake[0][0] - 1, snake[0][1]))
    elif key == curses.KEY_LEFT and prev_key != curses.KEY_RIGHT:
        snake.insert(0, (snake[0][0], snake[0][1] - 1))
    elif key == curses.KEY_RIGHT and prev_key != curses.KEY_LEFT:
        snake.insert(0, (snake[0][0], snake[0][1] + 1))

curses.endwin()
print("\nScore - " + str(score))
